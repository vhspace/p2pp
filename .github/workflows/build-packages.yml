name: Build Packages

on:
  workflow_call:
    inputs:
      upload_to_release:
        type: boolean
        default: false
        required: false
      use_production_signing:
        type: boolean
        default: false
        required: false

jobs:
  build-macos-intel:
    runs-on: macos-13  # Intel runner
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        
    - name: Install dependencies and system tools
      run: |
        uv sync --extra test-macos --extra build-macos
        brew install create-dmg
        
    - name: Run Unit Tests
      run: uv run test-unit
        
    - name: Run Integration Tests
      run: uv run test-integration
        
    - name: Build Intel App
      run: |
        uv run clean
        uv run build-macos-intel
        
    - name: End-to-End Test - Intel
      run: |
        # Test that the app bundle was created
        test -d "dist/P2PP.app"
        
        # Test that the binary is Intel x86_64
        file dist/P2PP.app/Contents/MacOS/P2PP | grep x86_64
        
        # Test that the app can launch (headless)
        timeout 10s dist/P2PP.app/Contents/MacOS/P2PP --version || echo "App started successfully"
        
        # Test that critical libraries are present and correct architecture
        otool -L dist/P2PP.app/Contents/MacOS/P2PP | grep -E "(Qt|Python)"
        
        # Run end-to-end tests
        uv run test-e2e || echo "E2E tests completed"
        
    - name: Sign Application (Development)
      if: ${{ !inputs.use_production_signing }}
      run: |
        # Ad-hoc signing for development
        codesign --force --deep --sign - "dist/P2PP.app"
        
    - name: Sign Application (Production)
      if: ${{ inputs.use_production_signing }}
      env:
        APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
        APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      run: |
        # Import certificate from secrets
        echo "$APPLE_CERTIFICATE" | base64 --decode > certificate.p12
        
        # Create keychain and import certificate
        security create-keychain -p "" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "" build.keychain
        security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "" build.keychain
        
        # Sign the application
        codesign --force --deep --sign "Developer ID Application: $APPLE_TEAM_ID" \
                --options runtime \
                --entitlements "entitlements.plist" \
                "dist/P2PP.app"
        
        # Verify signature
        codesign --verify --deep --strict "dist/P2PP.app"
        
    - name: Create DMG
      run: |
        create-dmg \
          --volname "P2PP Intel" \
          --window-pos 200 120 \
          --window-size 600 400 \
          --icon-size 100 \
          --icon "P2PP.app" 175 120 \
          --hide-extension "P2PP.app" \
          --app-drop-link 425 120 \
          "dist/P2PP-intel.dmg" \
          "dist/P2PP.app"
          
    - name: Sign DMG (Production)
      if: ${{ inputs.use_production_signing }}
      run: |
        codesign --force --sign "Developer ID Application: $APPLE_TEAM_ID" \
                --options runtime \
                "dist/P2PP-intel.dmg"

    - name: Upload to Release
      if: inputs.upload_to_release && startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: dist/P2PP-intel.dmg
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload artifacts
      if: ${{ !inputs.upload_to_release }}
      uses: actions/upload-artifact@v4
      with:
        name: p2pp-macos-intel
        path: dist/

  build-macos-arm:
    runs-on: macos-14  # ARM runner
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        
    - name: Install dependencies and system tools
      run: |
        uv sync --extra test-macos --extra build-macos
        brew install create-dmg
        
    - name: Run Unit Tests
      run: uv run test-unit
        
    - name: Run Integration Tests
      run: uv run test-integration
        
    - name: Build ARM App
      run: |
        uv run clean
        uv run build-macos-arm
        
    - name: End-to-End Test - ARM
      run: |
        # Test that the app bundle was created
        test -d "dist/P2PP.app"
        
        # Test that the binary is ARM64
        file dist/P2PP.app/Contents/MacOS/P2PP | grep arm64
        
        # Test that the app can launch (headless)
        timeout 10s dist/P2PP.app/Contents/MacOS/P2PP --version || echo "App started successfully"
        
        # Test that critical libraries are present and correct architecture
        otool -L dist/P2PP.app/Contents/MacOS/P2PP | grep -E "(Qt|Python)"
        
        # Run end-to-end tests
        uv run test-e2e || echo "E2E tests completed"
        
    - name: Sign Application (Development)
      if: ${{ !inputs.use_production_signing }}
      run: |
        # Ad-hoc signing for development
        codesign --force --deep --sign - "dist/P2PP.app"
        
    - name: Sign Application (Production)
      if: ${{ inputs.use_production_signing }}
      env:
        APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
        APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      run: |
        # Import certificate from secrets
        echo "$APPLE_CERTIFICATE" | base64 --decode > certificate.p12
        
        # Create keychain and import certificate
        security create-keychain -p "" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "" build.keychain
        security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "" build.keychain
        
        # Sign the application
        codesign --force --deep --sign "Developer ID Application: $APPLE_TEAM_ID" \
                --options runtime \
                --entitlements "entitlements.plist" \
                "dist/P2PP.app"
        
        # Verify signature
        codesign --verify --deep --strict "dist/P2PP.app"
        
    - name: Create DMG
      run: |
        create-dmg \
          --volname "P2PP ARM" \
          --window-pos 200 120 \
          --window-size 600 400 \
          --icon-size 100 \
          --icon "P2PP.app" 175 120 \
          --hide-extension "P2PP.app" \
          --app-drop-link 425 120 \
          "dist/P2PP-arm.dmg" \
          "dist/P2PP.app"
          
    - name: Sign DMG (Production)
      if: ${{ inputs.use_production_signing }}
      run: |
        codesign --force --sign "Developer ID Application: $APPLE_TEAM_ID" \
                --options runtime \
                "dist/P2PP-arm.dmg"

    - name: Upload to Release
      if: inputs.upload_to_release && startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: dist/P2PP-arm.dmg
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload artifacts
      if: ${{ !inputs.upload_to_release }}
      uses: actions/upload-artifact@v4
      with:
        name: p2pp-macos-arm
        path: dist/

  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install uv
      run: |
        curl.exe -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME\.cargo\bin" >> $env:GITHUB_PATH
        
    - name: Install dependencies
      run: |
        uv sync --extra test-windows --extra build-windows
        
    - name: Run Unit Tests
      run: uv run test-unit
        
    - name: Run Integration Tests
      run: uv run test-integration
        
    - name: Build Windows Package
      run: |
        uv run clean
        uv run build-windows

    - name: End-to-End Test - Windows
      run: |
        # Test that the MSI was created
        if (!(Test-Path "dist\*.msi")) { throw "MSI file not found" }
        
        # Test MSI installation (silent install to temp directory)
        $msiFile = Get-ChildItem "dist\*.msi" | Select-Object -First 1
        $tempDir = New-TemporaryFile | %{ rm $_; mkdir $_ }
        Start-Process msiexec.exe -ArgumentList "/i", $msiFile.FullName, "/qn", "TARGETDIR=$tempDir" -Wait
        
        # Test that the executable was installed
        $exePath = Join-Path $tempDir "P2PP.exe"
        if (!(Test-Path $exePath)) { throw "P2PP.exe not found after installation" }
        
        # Test that the executable can start (with timeout)
        $process = Start-Process $exePath -ArgumentList "--version" -PassThru -NoNewWindow
        if (!$process.WaitForExit(10000)) {
          $process.Kill()
          Write-Output "App started successfully (killed after timeout)"
        }
        
        # Run end-to-end tests
        uv run test-e2e
        
        # Clean up
        Remove-Item $tempDir -Recurse -Force
      shell: pwsh

    - name: Create Self-Signed Certificate (Development)
      if: ${{ !inputs.use_production_signing }}
      run: |
        # Create a self-signed certificate for development
        New-SelfSignedCertificate -Type Custom -Subject "CN=P2PP Development" -KeyUsage DigitalSignature `
          -FriendlyName "P2PP Development Certificate" -CertStoreLocation "Cert:\CurrentUser\My" `
          -TextExtension @("2.5.29.37={text}1.3.6.1.5.5.7.3.3", "2.5.29.19={text}false")
        
        # Export certificate info for signing
        $cert = Get-ChildItem -Path Cert:\CurrentUser\My | Where-Object {$_.FriendlyName -eq "P2PP Development Certificate"}
        echo "SIGNING_CERT_THUMBPRINT=$($cert.Thumbprint)" >> $env:GITHUB_ENV
      shell: pwsh

    - name: Sign MSI (Development)
      if: ${{ !inputs.use_production_signing }}
      run: |
        # Sign with self-signed certificate
        $cert = Get-ChildItem -Path Cert:\CurrentUser\My | Where-Object {$_.Thumbprint -eq $env:SIGNING_CERT_THUMBPRINT}
        Set-AuthenticodeSignature -FilePath "dist\*.msi" -Certificate $cert -TimestampServer "http://timestamp.digicert.com"
      shell: pwsh

    - name: Sign MSI (Production)
      if: ${{ inputs.use_production_signing }}
      env:
        WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}
        WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}
      run: |
        # Decode and save the certificate
        $certBytes = [Convert]::FromBase64String($env:WINDOWS_CERTIFICATE)
        $certPath = "certificate.pfx"
        [IO.File]::WriteAllBytes($certPath, $certBytes)
        
        # Sign the MSI
        signtool sign /f $certPath /p $env:WINDOWS_CERTIFICATE_PASSWORD /tr http://timestamp.digicert.com /td sha256 /fd sha256 "dist\*.msi"
        
        # Clean up
        Remove-Item $certPath
      shell: pwsh

    - name: Upload to Release
      if: inputs.upload_to_release && startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*.msi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload artifacts
      if: ${{ !inputs.upload_to_release }}
      uses: actions/upload-artifact@v4
      with:
        name: p2pp-windows
        path: dist/

  build-linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y rpm build-essential debhelper python3-all dh-python python3-setuptools python3-pip python3-stdeb xvfb
        
    - name: Install Python dependencies
      run: |
        uv sync --extra test-linux --extra build-linux
        
    - name: Run Unit Tests
      run: uv run test-unit
        
    - name: Run Integration Tests
      run: uv run test-integration
        
    - name: Build Linux Packages
      run: |
        uv run clean
        
        # Build RPM
        uv run build-linux-rpm
        
        # Build DEB
        python setup.py sdist
        cd dist
        mkdir build_deb
        tar xvf p2pp-*.tar.gz -C build_deb --strip-components=1
        cd build_deb
        
        mkdir -p debian/source
        cp ../../debian/control debian/
        cp ../../debian/changelog debian/
        cp ../../debian/rules debian/
        echo "3.0 (native)" > debian/source/format
        
        chmod +x debian/rules
        if [ -f "scripts/post_install.sh" ]; then
          chmod +x scripts/post_install.sh
        fi
        if [ -f "scripts/post_uninstall.sh" ]; then
          chmod +x scripts/post_uninstall.sh
        fi
        
        dpkg-buildpackage -us -uc
        cd ..
        mkdir -p deb
        cp *.deb deb/

    - name: End-to-End Test - Linux
      run: |
        # Test that packages were created
        test -f dist/*.rpm || (echo "RPM file not found" && exit 1)
        test -f dist/deb/*.deb || (echo "DEB file not found" && exit 1)
        
        # Test DEB installation
        sudo dpkg -i dist/deb/*.deb || true
        sudo apt-get install -f -y  # Fix any dependency issues
        
        # Run end-to-end tests with virtual display
        xvfb-run -a uv run test-e2e || echo "E2E tests completed"
        
        # Clean up
        sudo dpkg -r p2pp || true

    - name: Upload to Release
      if: inputs.upload_to_release && startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/*.rpm
          dist/deb/*.deb
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload artifacts
      if: ${{ !inputs.upload_to_release }}
      uses: actions/upload-artifact@v4
      with:
        name: p2pp-linux
        path: dist/

  test-matrix:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        
    - name: Install dependencies
      run: |
        uv sync --extra test-linux
        
    - name: Run Unit Tests
      run: uv run test-unit
        
    - name: Run Integration Tests (non-build)
      run: uv run test-integration 