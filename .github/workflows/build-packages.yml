name: Build Packages

on:
  workflow_call:
    inputs:
      upload_to_release:
        type: boolean
        default: false
        required: false
      use_production_signing:
        type: boolean
        default: false
        required: false
      tag_name:
        type: string
        required: false
        description: 'Tag name for release (used when called from workflow_dispatch)'

jobs:
  build-macos:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v3
      with:
        ref: ${{ inputs.tag_name || github.ref }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Get version
      id: get_version
      run: |
        VERSION=$(python version.py)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-mac.txt
        brew install create-dmg
        
    - name: Build Universal App
      run: |
        rm -rf build/ dist/
        python setup.py py2app
        
    - name: Sign Application (Development)
      if: ${{ !inputs.use_production_signing }}
      run: |
        # Ad-hoc signing for development
        codesign --force --deep --sign - "dist/P2PP.app"
        
    - name: Sign Application (Production)
      if: ${{ inputs.use_production_signing }}
      env:
        APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
        APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      run: |
        # Import certificate from secrets
        echo "$APPLE_CERTIFICATE" | base64 --decode > certificate.p12
        
        # Create keychain and import certificate
        security create-keychain -p "" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "" build.keychain
        security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "" build.keychain
        
        # Sign the application
        codesign --force --deep --sign "Developer ID Application: $APPLE_TEAM_ID" \
                --options runtime \
                --entitlements "entitlements.plist" \
                "dist/P2PP.app"
        
        # Verify signature
        codesign --verify --deep --strict "dist/P2PP.app"
        
    - name: Create DMG
      run: |
        create-dmg \
          --volname "P2PP" \
          --window-pos 200 120 \
          --window-size 600 400 \
          --icon-size 100 \
          --icon "P2PP.app" 175 120 \
          --hide-extension "P2PP.app" \
          --app-drop-link 425 120 \
          "dist/P2PP-${{ steps.get_version.outputs.version }}.dmg" \
          "dist/P2PP.app"
          
    - name: Sign DMG (Production)
      if: ${{ inputs.use_production_signing }}
      run: |
        codesign --force --sign "Developer ID Application: $APPLE_TEAM_ID" \
                --options runtime \
                "dist/P2PP-${{ steps.get_version.outputs.version }}.dmg"

    - name: Upload to Release
      if: inputs.upload_to_release && (startsWith(github.ref, 'refs/tags/') || inputs.tag_name)
      uses: softprops/action-gh-release@v1
      with:
        files: dist/P2PP-${{ steps.get_version.outputs.version }}.dmg
        draft: false
        prerelease: false
        generate_release_notes: true
        tag_name: ${{ inputs.tag_name || github.ref_name }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload artifacts
      if: ${{ !inputs.upload_to_release }}
      uses: actions/upload-artifact@v4
      with:
        name: p2pp-macos
        path: dist/

  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3
      with:
        ref: ${{ inputs.tag_name || github.ref }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Get version
      id: get_version
      run: |
        $VERSION = python version.py
        echo "version=$VERSION" >> $env:GITHUB_OUTPUT
      shell: pwsh
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-win.txt
        
    - name: Build Windows Package
      run: |
        python setup.py bdist_msi

    - name: Create Self-Signed Certificate (Development)
      if: ${{ !inputs.use_production_signing }}
      run: |
        # Create a self-signed certificate for development
        New-SelfSignedCertificate -Type Custom -Subject "CN=P2PP Development" -KeyUsage DigitalSignature `
          -FriendlyName "P2PP Development Certificate" -CertStoreLocation "Cert:\CurrentUser\My" `
          -TextExtension @("2.5.29.37={text}1.3.6.1.5.5.7.3.3", "2.5.29.19={text}false")
        
        # Export certificate info for signing
        $cert = Get-ChildItem -Path Cert:\CurrentUser\My | Where-Object {$_.FriendlyName -eq "P2PP Development Certificate"}
        echo "SIGNING_CERT_THUMBPRINT=$($cert.Thumbprint)" >> $env:GITHUB_ENV
      shell: pwsh

    - name: Sign MSI (Development)
      if: ${{ !inputs.use_production_signing }}
      run: |
        # Sign with self-signed certificate
        $cert = Get-ChildItem -Path Cert:\CurrentUser\My | Where-Object {$_.Thumbprint -eq $env:SIGNING_CERT_THUMBPRINT}
        Set-AuthenticodeSignature -FilePath "dist\*.msi" -Certificate $cert -TimestampServer "http://timestamp.digicert.com"
      shell: pwsh

    - name: Sign MSI (Production)
      if: ${{ inputs.use_production_signing }}
      env:
        WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}
        WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}
      run: |
        # Decode and save the certificate
        $certBytes = [Convert]::FromBase64String($env:WINDOWS_CERTIFICATE)
        $certPath = "certificate.pfx"
        [IO.File]::WriteAllBytes($certPath, $certBytes)
        
        # Sign the MSI
        signtool sign /f $certPath /p $env:WINDOWS_CERTIFICATE_PASSWORD /tr http://timestamp.digicert.com /td sha256 /fd sha256 "dist\*.msi"
        
        # Clean up
        Remove-Item $certPath
      shell: pwsh

    - name: Upload to Release
      if: inputs.upload_to_release && (startsWith(github.ref, 'refs/tags/') || inputs.tag_name)
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*.msi
        tag_name: ${{ inputs.tag_name || github.ref_name }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload artifacts
      if: ${{ !inputs.upload_to_release }}
      uses: actions/upload-artifact@v4
      with:
        name: p2pp-windows
        path: dist/

  build-linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        ref: ${{ inputs.tag_name || github.ref }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Get version
      id: get_version
      run: |
        VERSION=$(python version.py)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y rpm build-essential debhelper python3-all dh-python python3-setuptools python3-pip python3-stdeb
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-linux.txt
        
    - name: Build Linux Packages
      run: |
        # Build RPM
        python setup.py bdist_rpm
        
        # Build DEB
        python setup.py sdist
        cd dist
        mkdir build_deb
        tar xvf p2pp-*.tar.gz -C build_deb --strip-components=1
        cd build_deb
        
        mkdir -p debian/source
        cp ../../debian/control debian/
        cp ../../debian/changelog debian/
        cp ../../debian/rules debian/
        echo "3.0 (native)" > debian/source/format
        
        # Update changelog with current version
        VERSION="${{ steps.get_version.outputs.version }}"
        DATE=$(date -R)
        cat > debian/changelog << EOF
        p2pp ($VERSION-1) unstable; urgency=medium

          * Release version $VERSION

         -- GitHub Actions <actions@github.com>  $DATE
        EOF
        
        chmod +x debian/rules
        if [ -f "scripts/post_install.sh" ]; then
          chmod +x scripts/post_install.sh
        fi
        if [ -f "scripts/post_uninstall.sh" ]; then
          chmod +x scripts/post_uninstall.sh
        fi
        
        dpkg-buildpackage -us -uc
        cd ..
        mkdir -p deb
        cp *.deb deb/

    - name: Upload to Release
      if: inputs.upload_to_release && (startsWith(github.ref, 'refs/tags/') || inputs.tag_name)
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/*.rpm
          dist/deb/*.deb
        tag_name: ${{ inputs.tag_name || github.ref_name }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload artifacts
      if: ${{ !inputs.upload_to_release }}
      uses: actions/upload-artifact@v4
      with:
        name: p2pp-linux
        path: dist/ 
